- set_fact:
    node_subdir: node-{{ openshift.common.hostname }}
    config_dir: "{{ openshift_generated_configs_dir }}/node-{{ openshift.common.hostname }}"

- name: Generate the node client config
  delegate_to: "{{ openshift_first_master }}"
  command: >
    osadm create-api-client-config
      --certificate-authority={{ openshift_master_ca_cert }}
      --client-dir={{ config_dir }}
      --groups=system:nodes
      --master={{ openshift_node_master_api_url }}
      --signer-cert={{ openshift_master_ca_cert }}
      --signer-key={{ openshift_master_ca_key }}
      --signer-serial={{ openshift_master_ca_serial }}
      --user=system:node-{{ openshift.common.hostname }}
  args:
    creates: "{{ config_dir }}"

- name: Generate the node server certificate
  delegate_to: "{{ openshift_first_master }}"
  command: >
    osadm create-server-cert
      --cert=server.crt --key=server.key --overwrite=true
      --hostnames={{ [openshift.common.hostname, openshift.common.public_hostname]|unique|join(",") }}
      --signer-cert={{ openshift_master_ca_cert }}
      --signer-key={{ openshift_master_ca_key }}
      --signer-serial={{ openshift_master_ca_serial }}
  args:
    chdir: "{{ config_dir }}"
    creates: "{{ config_dir }}/server.crt"

- name: Create the node config tgz on the master
  delegate_to: "{{ openshift_first_master }}"
  command: tar -czvf {{ config_dir }}.tgz --transform 's|system:{{ node_subdir }}|node|' -C {{ config_dir }} .
  args:
    creates: "{{ config_dir }}.tgz"

- name: Create local temp directory
  local_action: command mktemp -d /tmp/openshift-ansible-XXXXXXX
  register: mktemp_result

- name: Fetch the node config tgz from the master
  delegate_to: "{{ openshift_first_master }}"
  fetch:
    dest: "{{ mktemp_result.stdout }}/"
    src: "{{ config_dir }}.tgz"
    flat: yes
    validate_checksum: yes
    fail_on_missing: yes

- name: Extract the node config tgz on the node
  unarchive:
    src: "{{ mktemp_result.stdout }}/{{ node_subdir }}.tgz"
    dest: "{{ openshift_node_config_dir }}"

- name: Delete local temporary directory
  local_action: file name={{ mktemp_result.stdout }} state=absent
